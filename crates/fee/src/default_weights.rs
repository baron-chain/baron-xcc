//! Autogenerated weights for fee
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-09-07, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/interbtc-standalone
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// fee
// --extrinsic
// *
// --steps
// 100
// --repeat
// 10
// --output
// crates/fee/src/default_weights.rs
// --template
// .deploy/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for fee.
pub trait WeightInfo {
	fn withdraw_rewards() -> Weight;
	fn set_issue_fee() -> Weight;
	fn set_issue_griefing_collateral() -> Weight;
	fn set_redeem_fee() -> Weight;
	fn set_premium_redeem_fee() -> Weight;
	fn set_punishment_fee() -> Weight;
	fn set_replace_griefing_collateral() -> Weight;
	fn set_commission() -> Weight;
}

/// Weights for fee using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Rewards Stake (r:1 w:0)
	// Storage: Rewards RewardPerToken (r:1 w:0)
	// Storage: Rewards RewardTally (r:1 w:1)
	// Storage: Rewards TotalRewards (r:1 w:1)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: Staking Stake (r:1 w:0)
	// Storage: Staking SlashPerToken (r:1 w:0)
	// Storage: Staking SlashTally (r:1 w:0)
	// Storage: Staking RewardPerToken (r:1 w:0)
	// Storage: Staking RewardTally (r:1 w:1)
	// Storage: Staking TotalRewards (r:1 w:1)
	fn withdraw_rewards() -> Weight {
		Weight::from_parts(106_814_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().reads(13 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}

	// Storage: Fee IssueFee (r:0 w:1)
	fn set_issue_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	// Storage: Fee IssueGriefingCollateral (r:0 w:1)
	fn set_issue_griefing_collateral() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	// Storage: Fee RedeemFee (r:0 w:1)
	fn set_redeem_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	// Storage: Fee PremiumRedeemFee (r:0 w:1)
	fn set_premium_redeem_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	// Storage: Fee PunishmentFee (r:0 w:1)
	fn set_punishment_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}

	// Storage: Fee ReplaceGriefingCollateral (r:0 w:1)
	fn set_replace_griefing_collateral() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	
	// Storage: Commission (r:0 w:1)
	fn set_commission() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Rewards Stake (r:1 w:0)
	// Storage: Rewards RewardPerToken (r:1 w:0)
	// Storage: Rewards RewardTally (r:1 w:1)
	// Storage: Rewards TotalRewards (r:1 w:1)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: Staking Stake (r:1 w:0)
	// Storage: Staking SlashPerToken (r:1 w:0)
	// Storage: Staking SlashTally (r:1 w:0)
	// Storage: Staking RewardPerToken (r:1 w:0)
	// Storage: Staking RewardTally (r:1 w:1)
	// Storage: Staking TotalRewards (r:1 w:1)
	fn withdraw_rewards() -> Weight {
		Weight::from_parts(106_814_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().reads(13 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}

	// Storage: Fee IssueFee (r:0 w:1)
	fn set_issue_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	// Storage: Fee IssueGriefingCollateral (r:0 w:1)
	fn set_issue_griefing_collateral() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	// Storage: Fee RedeemFee (r:0 w:1)
	fn set_redeem_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	// Storage: Fee PremiumRedeemFee (r:0 w:1)
	fn set_premium_redeem_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	// Storage: Fee PunishmentFee (r:0 w:1)
	fn set_punishment_fee() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	// Storage: Fee ReplaceGriefingCollateral (r:0 w:1)
	fn set_replace_griefing_collateral() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}

	// Storage: Fee Commission (r:0 w:1)
	fn set_commission() -> Weight {
		Weight::from_parts(2_835_000 as u64, 0u64)
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}

