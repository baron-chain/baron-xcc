
//! Autogenerated weights for dex_swap_router
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `enterprise`, CPU: `Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// dex-swap-router
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 20
// --output
// crates/dex-swap-router/src/default_weights.rs
// --template
// .deploy/default-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for dex_swap_router.
pub trait WeightInfo {
	fn validate_routes(a: u32, ) -> Weight;
}

/// Weights for dex_swap_router using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `a` is `[2, 10]`.
	fn validate_routes(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 391_000 picoseconds.
		Weight::from_parts(419_000, 0)
			// Standard Error: 2_409
			.saturating_add(Weight::from_parts(111_119, 0).saturating_mul(a.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// The range of component `a` is `[2, 10]`.
	fn validate_routes(a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 391_000 picoseconds.
		Weight::from_parts(419_000, 0)
			// Standard Error: 2_409
			.saturating_add(Weight::from_parts(111_119, 0).saturating_mul(a.into()))
	}
}
